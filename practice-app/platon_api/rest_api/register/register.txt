Help on module rest_api.register.register in rest_api.register:

NAME
    rest_api.register.register - Created on MAY 16, 2020

DESCRIPTION
    This script controls the registration api of PLATON_API, using django&mysql backend.
    Endpoint description:
        http://localhost:8000/api/register/
        
        'GET':
            Produces error
        'POST':
            Gets dictionary from body.
            JSON Format : { 'name': "",                 string, Name parameter given by user
                            'surname': "",              string, Surname parameter given by user
                            'password1': "",            string, Password1 given by user
                            'password2':"",             string, Password2 given by user to check whether Password1 is matched.
                            'e_mail':"",                string, Email parameter given by user
                            'about_me':"",              string, About me parameter given by user
                            'job_id':"",                int, job id parameter chosen by user
                            'forget_password_ans':"",   string, forget password answer parameter given by user
                            'field_of_study':"" }       string, field of study parameter given by user
    
    Frontend Endpoint Description:
        http://localhost:8000/api/register/home/
        
        'GET':
            Form as HTML
    
    @author: Burak Omur, darktheorys
    @company: Group7

CLASSES
    django.contrib.auth.forms.UserCreationForm(django.forms.models.ModelForm)
        RegisterForm
    
    class RegisterForm(django.contrib.auth.forms.UserCreationForm)
     |  RegisterForm(*args, **kwargs)
     |  
     |  A form that creates a user, with no privileges, from the given username and
     |  password.
     |  
     |  Method resolution order:
     |      RegisterForm
     |      django.contrib.auth.forms.UserCreationForm
     |      django.forms.models.ModelForm
     |      django.forms.models.BaseModelForm
     |      django.forms.forms.BaseForm
     |      builtins.object
     |  
     |  Readonly properties defined here:
     |  
     |  media
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Meta = <class 'rest_api.register.register.RegisterForm.Meta'>
     |  
     |  
     |  base_fields = {'about_me': <django.forms.fields.CharField object>, 'e_...
     |  
     |  declared_fields = {'about_me': <django.forms.fields.CharField object>,...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.contrib.auth.forms.UserCreationForm:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  clean_password2(self)
     |  
     |  save(self, commit=True)
     |      Save this form's self.instance object if commit=True. Otherwise, add
     |      a save_m2m() method to the form which can be called after the instance
     |      is saved manually at a later time. Return the model instance.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.contrib.auth.forms.UserCreationForm:
     |  
     |  error_messages = {'password_mismatch': 'The two password fields didn’t...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.forms.models.BaseModelForm:
     |  
     |  clean(self)
     |      Hook for doing any extra form-wide cleaning after Field.clean() has been
     |      called on every field. Any ValidationError raised by this method will
     |      not be associated with a particular field; it will have a special-case
     |      association with the field named '__all__'.
     |  
     |  validate_unique(self)
     |      Call the instance's validate_unique() method and update the form's
     |      validation errors if any were raised.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from django.forms.forms.BaseForm:
     |  
     |  __getitem__(self, name)
     |      Return a BoundField with the given name.
     |  
     |  __html__ lambda self
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__ lambda self
     |  
     |  add_error(self, field, error)
     |      Update the content of `self._errors`.
     |      
     |      The `field` argument is the name of the field to which the errors
     |      should be added. If it's None, treat the errors as NON_FIELD_ERRORS.
     |      
     |      The `error` argument can be a single error, a list of errors, or a
     |      dictionary that maps field names to lists of errors. An "error" can be
     |      either a simple string or an instance of ValidationError with its
     |      message attribute set and a "list or dictionary" can be an actual
     |      `list` or `dict` or an instance of ValidationError with its
     |      `error_list` or `error_dict` attribute set.
     |      
     |      If `error` is a dictionary, the `field` argument *must* be None and
     |      errors will be added to the fields that correspond to the keys of the
     |      dictionary.
     |  
     |  add_initial_prefix(self, field_name)
     |      Add an 'initial' prefix for checking dynamic initial values.
     |  
     |  add_prefix(self, field_name)
     |      Return the field name with a prefix appended, if this Form has a
     |      prefix set.
     |      
     |      Subclasses may wish to override.
     |  
     |  as_p(self)
     |      Return this form rendered as HTML <p>s.
     |  
     |  as_table(self)
     |      Return this form rendered as HTML <tr>s -- excluding the <table></table>.
     |  
     |  as_ul(self)
     |      Return this form rendered as HTML <li>s -- excluding the <ul></ul>.
     |  
     |  changed_data = <django.utils.functional.cached_property object>
     |  full_clean(self)
     |      Clean all of self.data and populate self._errors and self.cleaned_data.
     |  
     |  get_initial_for_field(self, field, field_name)
     |      Return initial data for field on form. Use initial data from the form
     |      or the field, in that order. Evaluate callable values.
     |  
     |  has_changed(self)
     |      Return True if data differs from initial.
     |  
     |  has_error(self, field, code=None)
     |  
     |  hidden_fields(self)
     |      Return a list of all the BoundField objects that are hidden fields.
     |      Useful for manual form layout in templates.
     |  
     |  is_multipart(self)
     |      Return True if the form needs to be multipart-encoded, i.e. it has
     |      FileInput, or False otherwise.
     |  
     |  is_valid(self)
     |      Return True if the form has no errors, or False otherwise.
     |  
     |  non_field_errors(self)
     |      Return an ErrorList of errors that aren't associated with a particular
     |      field -- i.e., from Form.clean(). Return an empty ErrorList if there
     |      are none.
     |  
     |  order_fields(self, field_order)
     |      Rearrange the fields according to field_order.
     |      
     |      field_order is a list of field names specifying the order. Append fields
     |      not included in the list in the default order for backward compatibility
     |      with subclasses not overriding field_order. If field_order is None,
     |      keep all fields in the order defined in the class. Ignore unknown
     |      fields in field_order to allow disabling fields in form subclasses
     |      without redefining ordering.
     |  
     |  visible_fields(self)
     |      Return a list of BoundField objects that aren't hidden fields.
     |      The opposite of the hidden_fields() method.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from django.forms.forms.BaseForm:
     |  
     |  errors
     |      Return an ErrorDict for the data provided for the form.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from django.forms.forms.BaseForm:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from django.forms.forms.BaseForm:
     |  
     |  default_renderer = None
     |  
     |  field_order = None
     |  
     |  prefix = None
     |  
     |  use_required_attribute = True

FUNCTIONS
    isValid(name, surname, password1, password2, email, about_me, job_id, forget_pw_ans, field_of_study)
            where 'name': string, Name parameter given by user
            where 'surname': string, Surname parameter given by user
            where 'password1': string, Password1 given by user
            where 'password2': string, Password2 given by user to check whether Password1 is matched.
            where 'email': string, Email parameter given by user
            where 'about_me': string, About me parameter given by user
            where 'job_id': string, job id parameter chosen by user
            where 'forget_pw_ans': string, forget password answer parameter given by user
            where 'field_of_study': string, field of study parameter given by user
            
            returns True if given values appropriate to insert in database, else False
        
        This function takes input parameters and checks them if they are valid and return the boolean result.
    
    register_api(response)
        where 'response': HttpResponse, Name parameter given by user
        
        returns Json object if 'GET' requested else nothing
        
        This function takes Httpresponse object and if 'POST' request used, it inserts into database
    
    register_form(response)
        where 'response': HttpResponse, Name parameter given by user
        
        returns redirection to another url, or renders a from page
        
        This function takes Httpresponse object and if 'POST' request used, it sends the "post" request to a pre-known url to this given HttpResponse object

DATA
    DATABASES = {'default': {'ATOMIC_REQUESTS': False, 'AUTOCOMMIT': True,...
    JOB_CHOICES = ((1, 'Student'), (2, 'Academician'), (3, 'Scientist'), (...
    USER_TABLENAME = 'users'
    WEBSITE_URL = 'http://localhost:8000'
    connection = <django.db.DefaultConnectionProxy object>

FILE
    d:\masaüstü\352_dev\bounswe2020group7\practice-app\platon_api\rest_api\register\register.py


